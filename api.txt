Auth
product
Order


Auth 
http://localhost:5000/api/auth/login

| Method     | Endpoint                                   | Body / Headers                                                                                  | Description      |
| ---------- | ------------------------------------------ | ----------------------------------------------------------------------------------------------- | ---------------- |
| **POST**   | http://localhost:5000/api/auth/signup      | `{ "name": "John Doe", "email": "john@example.com", "password": "123456", "role": "customer" }` | Register user    |
| **POST**   | `http://localhost:5000//api/auth/login`    | `{ "email": "john@example.com", "password": "123456" }`                                         | Login user       |
| **GET**    | `http://localhost:5000//api/auth/profile`  | `Authorization: Bearer <token>`                                                                 | Get user profile |
| **PUT**    | `http://localhost:5000//api/auth/profile`  | `{ "name": "New Name", "email": "new@example.com", "password": "newpass" }` + token             | Update profile   |
| **DELETE** | `http://localhost:5000//api/auth/delete`   | `Authorization: Bearer <token>`                                                                 | Delete account   |
| **POST**   | `http://localhost:5000//api/auth/logout`   | `Authorization: Bearer <token>`                                                                 | Logout           |



Register

Customer

POST /api/auth/signup
{ "name": "John", "email": "john@example.com", "password": "123456", "role": "customer" }


Vendor

POST /api/auth/signup
{ "name": "Shop", "email": "vendor@example.com", "password": "123456", "role": "vendor" }




Auth APIs

Base URL: http://localhost:5000/api/auth

1. Register User

POST /register

Body (JSON)

{
  "name": "John Doe",
  "email": "john@example.com",
  "password": "123456",
  "role": "customer"
}


üëâ Role can be: "customer" | "vendor" | "admin"

2. Login User

POST /login

Body (JSON)

{
  "email": "john@example.com",
  "password": "123456"
}


üëâ Returns a JWT token ‚Üí Use this in Postman Authorization ‚Üí Bearer Token

----------------------------------------------------------------------------------------------------------------------------

üì¶ Product APIs

Base URL: http://localhost:5000/api/products
(Require JWT + role: vendor or admin for add/update/delete)

3. Create Product

POST /

Headers: Authorization: Bearer <token>

Body (JSON)

{
  "name": "iPhone 16",
  "price": 799,
  "stock": 10,
  "description": "Latest iPhone"
}

4. Get All Products

GET /
üëâ Public (anyone can view)

5. Update Product

PUT /:id

Headers: Authorization: Bearer <token> (vendor/admin)

Body (JSON)

{
  "name": "iPhone 16 Pro",
  "price": 999,
  "stock": 5
}

6. Delete Product

DELETE /:id

Headers: Authorization: Bearer <token> (vendor/admin)




------------------------------------------------------------------------------------------------------------------------------
üõí Order APIs

Base URL: http://localhost:5000/api/orders

7. Place Order (Customer only)

POST /

Headers: Authorization: Bearer <customer token>

Body (JSON)

{
  "products": [
    { "productId": "64e72c1234abcd5678ef9012", "quantity": 2 },
    { "productId": "64e72c1234abcd5678ef9013", "quantity": 1 }
  ]
}

8. Get All Orders (Vendor/Admin only)

GET /

Headers: Authorization: Bearer <vendor/admin token>

9. Update Order Status (Vendor/Admin only)

PUT /:id

Headers: Authorization: Bearer <vendor/admin token>

Body (JSON)

{
  "status": "shipped",
  "paymentStatus": "paid"
}

10. Get Orders of a User (Customer only)
Get
http://localhost:5000/api/orders/user/68e78b091b07dc3c58e9fbe4

Headers: Authorization: Bearer <customer token>

‚úÖ With these APIs, you can test:

Customer flow: register/login ‚Üí view products ‚Üí place order ‚Üí view own orders

Vendor flow: register/login ‚Üí add products ‚Üí view/update orders

Admin flow: register/login ‚Üí manage products ‚Üí view all orders




Cart ------------------------------------------------------------------------------------------------------------------>

Add Product to Cart

Endpoint: POST http://localhost:5000/api/cart
Headers:

Authorization: Bearer <customer_token>
Content-Type: application/json


Body (JSON):

{
  "productId": "68e785bc0eadb96c9f64f538",
  "quantity": 2
}


Expected Response:

{
  "message": "Product added to cart",
  "cart": {
    "userId": "68e78b091b07dc3c58e9fbe4",
    "products": [
      {
        "productId": "68e785bc0eadb96c9f64f538",
        "quantity": 2
      }
    ],
    "_id": "64abc123def4567890",
    "createdAt": "...",
    "updatedAt": "..."
  }
}

2Ô∏è‚É£ Get User Cart

Endpoint: GET http://localhost:5000/api/cart
Headers:

Authorization: Bearer <customer_token>


Expected Response:

{
  "_id": "64abc123def4567890",
  "userId": {
    "_id": "68e78b091b07dc3c58e9fbe4",
    "name": "John Doe",
    "email": "john6@example.com"
  },
  "products": [
    {
      "productId": {
        "_id": "68e785bc0eadb96c9f64f538",
        "name": "iPhone 16",
        "price": 799
      },
      "quantity": 2
    }
  ],
  "createdAt": "...",
  "updatedAt": "..."
}

3Ô∏è‚É£ Update Product Quantity

Endpoint: PUT http://localhost:5000/api/cart
Headers:

Authorization: Bearer <customer_token>
Content-Type: application/json


Body (JSON):

{
  "productId": "68e785bc0eadb96c9f64f538",
  "quantity": 5
}


Expected Response:

{
  "message": "Cart updated",
  "cart": { ...updated cart... }
}

4Ô∏è‚É£ Remove Product from Cart

Endpoint: DELETE http://localhost:5000/api/cart/68e785bc0eadb96c9f64f538
Headers:

Authorization: Bearer <customer_token>


Expected Response:

{
  "message": "Product removed from cart",
  "cart": { ...updated cart without this product... }
}







Analytics ---------------------------------------------------------------------------------------------------------->

1Ô∏è‚É£ Pending Orders API

Endpoint:

GET http://localhost:5000/api/orders/pending


Headers:

Authorization: Bearer <ADMIN_OR_VENDOR_TOKEN>


Expected Response:

{
  "message": "Pending orders fetched successfully",
  "orders": [
    {
      "_id": "68e78c951f389c0a6424131a",
      "userId": {
        "_id": "68e78b091b07dc3c58e9fbe4",
        "name": "John Doe",
        "email": "john6@example.com"
      },
      "products": [
        {
          "productId": {
            "_id": "68e78c1e1f389c0a6424130d",
            "name": "iPhone 16 Pro",
            "price": 999
          },
          "quantity": 2,
          "price": 999
        }
      ],
      "totalPrice": 1998,
      "status": "pending",
      "paymentStatus": "unpaid",
      "createdAt": "2025-10-09T10:21:09.707Z"
    }
  ]
}

2Ô∏è‚É£ Analytics APIs
a) Sales
GET http://localhost:5000/api/analytics/sales


Headers:

Authorization: Bearer <ADMIN_TOKEN>


Response Example:

{
  "message": "Sales analytics fetched",
  "analytics": {
    "totalRevenue": 50000,
    "totalOrders": 10
  }
}

b) Top Products
GET http://localhost:5000/api/analytics/products


Headers:

Authorization: Bearer <ADMIN_TOKEN>


Response Example:

{
  "message": "Top-selling products fetched",
  "topProducts": [
    { "_id": "68e78c1e1f389c0a6424130d", "totalSold": 15 },
    { "_id": "68e78c1e1f389c0a6424130e", "totalSold": 10 }
  ]
}

c) User Stats
GET http://localhost:5000/api/analytics/users


Headers:

Authorization: Bearer <ADMIN_TOKEN>


Response Example:

{
  "message": "User stats fetched",
  "customers": 5,
  "vendors": 2
}




----------------------------------------------------------------------------------------------------------------------------->

Wishlist

1Ô∏è‚É£ Add Product to Wishlist

Method: POST

URL: http://localhost:5000/api/wishlist/<productId>
Replace <productId> with the actual product _id from your database.

Headers:

Authorization: Bearer <token> ‚Üê Use the JWT token of the logged-in user

Content-Type: application/json

Body: (no body needed for this endpoint)

Expected Response:

{
  "message": "Product added to wishlist",
  "wishlist": {
    "_id": "68e7xxxxxx",
    "userId": "68e7xxxxxx",
    "products": ["<productId>"],
    "createdAt": "...",
    "updatedAt": "..."
  }
}

2Ô∏è‚É£ Get Wishlist

Method: GET

URL: http://localhost:5000/api/wishlist

Headers:

Authorization: Bearer <token>

Content-Type: application/json

Expected Response:

{
  "message": "Wishlist fetched",
  "products": [
    {
      "_id": "<productId>",
      "name": "iPhone 16",
      "description": "Latest iPhone",
      "price": 799,
      "category": "Electronics",
      "stock": 10,
      "images": [],
      "vendorId": "<vendorId>",
      "createdAt": "...",
      "updatedAt": "..."
    }
  ]
}

3Ô∏è‚É£ Remove Product from Wishlist

Method: DELETE

URL: http://localhost:5000/api/wishlist/<productId>

Headers:

Authorization: Bearer <token>

Expected Response:

{
  "message": "Product removed from wishlist",
  "wishlist": {
    "_id": "68e7xxxxxx",
    "userId": "68e7xxxxxx",
    "products": [], // product removed
    "createdAt": "...",
    "updatedAt": "..."
  }
}





Add review ------------------------------------------------------------------------------------------------------------->


1Ô∏è‚É£ Reviews & Ratings
Extend Product model
reviews: [
  {
    userId: { type: mongoose.Schema.Types.ObjectId, ref: "User" },
    rating: { type: Number, required: true },
    comment: String,
    createdAt: { type: Date, default: Date.now }
  }
]

Endpoints
a) Add review

Method: POST

URL: http://localhost:5000/api/products/:id/review

Headers:

Authorization: Bearer <token>

Content-Type: application/json

Body:

{
  "rating": 5,
  "comment": "Excellent product!"
}


Expected Response:

{
  "message": "Review added",
  "product": {
    "_id": "<productId>",
    "name": "iPhone 16",
    "reviews": [
      {
        "userId": "<userId>",
        "rating": 5,
        "comment": "Excellent product!",
        "createdAt": "2025-10-10T12:00:00.000Z",
        "_id": "<reviewId>"
      }
    ]
  }
}

b) Get reviews

Method: GET

URL: http://localhost:5000/api/products/:id/reviews

Headers: None

Expected Response:

{
  "message": "Reviews fetched",
  "reviews": [
    {
      "userId": "<userId>",
      "rating": 5,
      "comment": "Excellent product!",
      "createdAt": "2025-10-10T12:00:00.000Z"
    }
  ]
}


‚úÖ Check: Add multiple reviews and fetch to see all reviews list




--------------------------------------------------------------------------------------------------------------------------->
2Ô∏è‚É£ Pagination & Search
Endpoint

Method: GET

URL: http://localhost:5000/api/products?page=1&limit=10&search=iphone

Query Params

page ‚Üí page number

limit ‚Üí items per page

search ‚Üí search keyword (on product name or description)

Sample Response
{
  "message": "Products fetched",
  "products": [
    {
      "_id": "<id>",
      "name": "iPhone 16",
      "description": "Latest iPhone",
      "price": 799
    }
  ],
  "pagination": {
    "page": 1,
    "limit": 10,
    "totalPages": 3,
    "totalProducts": 25
  }
}


‚úÖ Check: Change page and limit, or search for different keywords to see filtered results.




-------------------------------------------------------------------------------------------------------------------------->

3Ô∏è‚É£ Filters (Category, Price, Rating)
Endpoint

Method: GET

URL Example:

http://localhost:5000/api/products?category=Electronics&minPrice=100&maxPrice=2000&minRating=4

Query Params

category ‚Üí filter by product category

minPrice & maxPrice ‚Üí price range

minRating ‚Üí minimum average rating

Sample Response
{
  "message": "Products fetched",
  "products": [
    {
      "_id": "<id>",
      "name": "iPhone 16",
      "price": 799,
      "category": "Electronics",
      "averageRating": 4.5
    }
  ]
}


‚úÖ Check: Modify filters and see if only matching products are returned.



--------------------------------------------------------------------------------------------------------------------------->



Place an order via Postman:

POST http://localhost:5000/api/orders
Headers:
Authorization: Bearer <customer-token>
Body (JSON):
{
  "products": [
    { "productId": "<product-id>", "quantity": 1 }
  ]
}



------------------------------------------------------------------------------------------------------------------>

6Ô∏è‚É£ Test in Postman
‚û§ Create Payment Order

POST http://localhost:5000/api/payment/create-order
Body (JSON):

{
  "amount": 500,
  "currency": "INR",
  "receipt": "order_rcpt_1"
}


‚úÖ Response:

{
  "success": true,
  "message": "Razorpay order created successfully",
  "order": {
    "id": "order_Lxy123abc",
    "amount": 50000,
    "currency": "INR",
    "receipt": "order_rcpt_1",
    "status": "created"
  }
}

‚û§ Verify Payment

POST http://localhost:5000/api/payment/verify
Body (JSON):

{
  "razorpay_order_id": "order_Lxy123abc",
  "razorpay_payment_id": "pay_Lxy789xyz",
  "razorpay_signature": "valid_generated_signature"
}

‚û§ Update Order Payment Status

PUT http://localhost:5000/api/payment/update/<orderId>
Body (JSON):

{
  "paymentStatus": "paid"
}